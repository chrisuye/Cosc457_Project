/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class Table extends javax.swing.JFrame {
    
    private static ArrayList<TuoPresent> tuoPresent = new ArrayList<TuoPresent>();
    private static ArrayList<TuePresent> tuePresent = new ArrayList<TuePresent>();
    private static ArrayList<TuoPresent> tuoPresentTime = new ArrayList<TuoPresent>();
    private static ArrayList<TuePresent> tuePresentTime = new ArrayList<TuePresent>();
    private static ArrayList<TimeTable> tuoTimeS = new ArrayList<TimeTable>();
    private static ArrayList<TimeTable> tuoTimeE = new ArrayList<TimeTable>();
    private static ArrayList<TimeTable> tueTimeS = new ArrayList<TimeTable>();
    private static ArrayList<TimeTable> tueTimeE = new ArrayList<TimeTable>();
    
    private static ArrayList<Students> students = new ArrayList<Students>();
    private static ArrayList<Tutor> tutor = new ArrayList<Tutor>();
    private static ArrayList<Tutee> tutee = new ArrayList<Tutee>();
    
    private static ArrayList<Taking> taking = new ArrayList<Taking>();
    private static ArrayList<Taking> math = new ArrayList<Taking>();

    /**
     * Creates new form Test
     */
    public Table() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        timeTable = new javax.swing.JTable();
        searchInput = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        allTime = new javax.swing.JButton();
        tutorTime = new javax.swing.JButton();
        tuteeTime = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        corTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchInput1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        searchBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        allTable = new javax.swing.JTable();
        allBtn = new javax.swing.JButton();
        tutorBtn = new javax.swing.JButton();
        tuteeBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        timeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Status", "Date", "Time"
            }
        ));
        jScrollPane3.setViewportView(timeTable);

        searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInputActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        allTime.setText("All");
        allTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimeActionPerformed(evt);
            }
        });

        tutorTime.setText("Tutor");
        tutorTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorTimeActionPerformed(evt);
            }
        });

        tuteeTime.setText("Tutee");
        tuteeTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tuteeTimeActionPerformed(evt);
            }
        });

        jLabel1.setText("mm-dd-yyyy");

        corTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Towson ID", "First Name", "Late Name", "Course ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(corTable);

        jLabel2.setText("Towson ID Search");

        searchInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInput1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Towosn ID");

        jLabel4.setText("Date Search");

        searchBtn1.setText("Search");
        searchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(allTime)
                                .addGap(18, 18, 18)
                                .addComponent(tutorTime)
                                .addGap(18, 18, 18)
                                .addComponent(tuteeTime)
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchBtn)
                                .addGap(33, 33, 33)))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(29, 29, 29)
                        .addComponent(searchInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn1)
                        .addGap(67, 67, 67))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchBtn)
                        .addComponent(jLabel1)
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tuteeTime)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tutorTime)
                        .addComponent(allTime)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        allTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Status"
            }
        ));
        jScrollPane2.setViewportView(allTable);

        allBtn.setText("All");
        allBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allBtnActionPerformed(evt);
            }
        });

        tutorBtn.setText("Tutor");
        tutorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorBtnActionPerformed(evt);
            }
        });

        tuteeBtn.setText("Tutee");
        tuteeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tuteeBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allBtn)
                            .addComponent(backBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tutorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tuteeBtn)))
                .addGap(75, 75, 75)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allBtn)
                            .addComponent(tutorBtn)
                            .addComponent(tuteeBtn))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)allTable.getModel();
        
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        
        tuePresent.clear();
        tuoPresent.clear();
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null,e);
        }
       
        final String ID = "cseyou1";
        final String PW = "Cosc*ymfw";
        final String SERVER = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/cseyou1db";
        
        try
        {
            
            Connection con = DriverManager.getConnection(SERVER,ID,PW);
            Statement stmt = con.createStatement();
            
            ResultSet rs = stmt.executeQuery("SELECT * FROM cseyou1db.Tutor_Present");
            
            while(rs.next()){
                String fName = rs.getString("FtuoName");
                String lName = rs.getString("LtuoName");
                
                tuoPresent.add(new TuoPresent(fName,lName));
            }
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.Tutee_Present");
            while(rs.next()){
                String fName = rs.getString("FtueName");
                String lName = rs.getString("LtueName");
                
                tuePresent.add(new TuePresent(fName,lName));
            }
            
            for(TuoPresent i: tuoPresent){
                model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor"});
            }
            for(TuePresent i: tuePresent){
                model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee"});
            }
            
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_allBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        tuoTimeS.clear();
        tuoTimeE.clear();
        tueTimeS.clear();
        tueTimeE.clear();
        String search = searchInput.getText();
        boolean check = false;
        if(search.isBlank() || search.isEmpty()){
            check = true;
        }
        DefaultTableModel model = (DefaultTableModel)timeTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null,e);
        }
       
        final String ID = "cseyou1";
        final String PW = "Cosc*ymfw";
        final String SERVER = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/cseyou1db";
        
        try
        {
            
            Connection con = DriverManager.getConnection(SERVER,ID,PW);
            Statement stmt = con.createStatement();
            
            ResultSet rs = stmt.executeQuery("SELECT * FROM cseyou1db.TutorStime");
            
            while(rs.next()){
                String fName = rs.getString("TSFname");
                String lName = rs.getString("TSLname");
                String date = rs.getString("TSDate");
                String time = rs.getString("TSTime");
                
                tuoTimeS.add(new TimeTable(fName,lName,date,time));
            }
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.TutorEtime");
            while(rs.next()){
                String fName = rs.getString("TEFName");
                String lName = rs.getString("TESName");
                String date = rs.getString("TEDate");
                String time = rs.getString("TETime");
                
                tuoTimeE.add(new TimeTable(fName,lName,date,time));
            }
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.TuteeStime");
            while(rs.next()){
                String fName = rs.getString("TSEFname");
                String lName = rs.getString("TSELname");
                String date = rs.getString("TSEDate");
                String time = rs.getString("TSETime");
                
                tueTimeS.add(new TimeTable(fName,lName,date,time));
            }
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.TuteeEtime");
            while(rs.next()){
                String fName = rs.getString("TEEFname");
                String lName = rs.getString("TEELname");
                String date = rs.getString("TEEDate");
                String time = rs.getString("TEETime");
                
                tueTimeE.add(new TimeTable(fName,lName,date,time));
            }
            
            for(TimeTable i: tuoTimeS){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tuoTimeE){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tueTimeS){
                if(i.checkDate(search)|| check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tueTimeE){
                if(i.checkDate(search)|| check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
            
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void tutorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tutorBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)allTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        for(TuoPresent i: tuoPresent){
             model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor"});
        }
    }//GEN-LAST:event_tutorBtnActionPerformed

    private void tuteeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tuteeBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)allTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        for(TuePresent i: tuePresent){
            model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee"});
        }
    }//GEN-LAST:event_tuteeBtnActionPerformed

    private void searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInputActionPerformed
        String search = searchInput.getText();
    }//GEN-LAST:event_searchInputActionPerformed

    private void allTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimeActionPerformed
        String search = searchInput.getText();
        boolean check = false;
        if(search.isBlank() || search.isEmpty()){
            check = true;
        }
        DefaultTableModel model = (DefaultTableModel)timeTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        for(TimeTable i: tuoTimeS){
                if(i.checkDate(search)||check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tuoTimeE){
                if(i.checkDate(search)||check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tueTimeS){
                if(i.checkDate(search)||check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tueTimeE){
                if(i.checkDate(search)||check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
    }//GEN-LAST:event_allTimeActionPerformed

    private void tutorTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tutorTimeActionPerformed
        String search = searchInput.getText();
        boolean check = false;
        if(search.isBlank() || search.isEmpty()){
            check = true;
        }
        DefaultTableModel model = (DefaultTableModel)timeTable.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        for(TimeTable i: tuoTimeS){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tuoTimeE){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutor",i.getDate(),i.getTime()});
                }
            }
    }//GEN-LAST:event_tutorTimeActionPerformed

    private void tuteeTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tuteeTimeActionPerformed
        String search = searchInput.getText();
        boolean check = false;
        if(search.isBlank() || search.isEmpty()){
            check = true;
        }
        DefaultTableModel model = (DefaultTableModel)timeTable.getModel();
       if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
            for(TimeTable i: tueTimeS){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
            for(TimeTable i: tueTimeE){
                if(i.checkDate(search) || check) {
                    model.addRow(new Object[] {i.getFirst(),i.getLast(),"Tutee",i.getDate(),i.getTime()});
                }
            }
    }//GEN-LAST:event_tuteeTimeActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        new Main().setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInput1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchInput1ActionPerformed

    private void searchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtn1ActionPerformed
        String search = searchInput1.getText();
        boolean check = false;
        if(search.isBlank() || search.isEmpty()){
            check = true;
        }
        students.clear();
        tutor.clear();
        tutee.clear();
        taking.clear();
        math.clear();
        DefaultTableModel model = (DefaultTableModel)corTable.getModel();
       if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
       
       try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null,e);
        }
       
        final String ID = "cseyou1";
        final String PW = "Cosc*ymfw";
        final String SERVER = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/cseyou1db";
        
         try
        {
            
            Connection con = DriverManager.getConnection(SERVER,ID,PW);
            Statement stmt = con.createStatement();
            
            ResultSet rs = stmt.executeQuery("SELECT * FROM cseyou1db.Students");
            
            
            while(rs.next()){
                String TUID = rs.getString("TU_ID");
                String Lname = rs.getString("Lname");
                String Fname = rs.getString("Fname");
                
                students.add(new Students(TUID,Lname,Fname));
            }
            
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.Tutor");
            while(rs.next()){
                String TUID = rs.getString("Tutor_ID");
                
                tutor.add(new Tutor(TUID));
            }
            
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.Tutee");
            while(rs.next()){
                String TUID = rs.getString("Tutee_ID");
                
                tutee.add(new Tutee(TUID));
            }

            
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.Taking");
            while(rs.next()){
                String cNum = rs.getString("CMNum");
                String cTID = rs.getString("TUE_ID");
                
                taking.add(new Taking(cNum,cTID));
            }
            
            rs = stmt.executeQuery("SELECT * FROM cseyou1db.Math_Class");
            while(rs.next()){
                String cNum = rs.getString("Course_Num");
                String cTID = rs.getString("Tuo_ID");
                
                math.add(new Taking(cNum,cTID));
            }
            
            for(Tutor i: tutor){
                if(i.checkID(search) || check){
                    for(Students j: students){
                        if(j.checkID(search)|| j.checkID(i.getID())){
                            for(Taking k: math){
                                if(k.checkId(search) || k.checkId(i.getID())){
                                    model.addRow(new Object[]{i.getID(),j.getFirst(),j.getLast(),k.getCnum(),"Tutor"});
                                }
                            }
                        }
                    }
                }
            }
            
            for(Tutee i: tutee){
                if(i.checkID(search)|| check){
                    for(Students j: students){
                        if(j.checkID(search)|| j.checkID(i.getID())){
                            for(Taking k: taking){
                                if(k.checkId(search)|| k.checkId(i.getID())){
                                    model.addRow(new Object[]{i.getID(),j.getFirst(),j.getLast(),k.getCnum(),"Tutee"});
                                }
                            }
                        }
                    }
                }
            }
            
        
            
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_searchBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Table().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allBtn;
    private javax.swing.JTable allTable;
    private javax.swing.JButton allTime;
    private javax.swing.JButton backBtn;
    private javax.swing.JTable corTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton searchBtn1;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTextField searchInput1;
    private javax.swing.JTable timeTable;
    private javax.swing.JButton tuteeBtn;
    private javax.swing.JButton tuteeTime;
    private javax.swing.JButton tutorBtn;
    private javax.swing.JButton tutorTime;
    // End of variables declaration//GEN-END:variables
}
